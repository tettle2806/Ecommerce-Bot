from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types.message import Message

from data.config import admin_id, cashier
from data.config import type_of_review
from data.loader import dp, db, bot
from keyboards.inline import accept_or_cancel
from keyboards.inline import generate_product_details, generate_cart_buttons
from keyboards.reply import generate_review, \
    main_menu, \
    generate_type_of_order, \
    generate_menu_categories, \
    send_location, generate_products
from states.address import AddressState
from states.card_state import CardState


@dp.message_handler(regexp='üõç –ó–∞–∫–∞–∑–∞—Ç—å')
async def reaction_order(message: Message):
    status = int(db.select_status_bot()[0])
    print(status)
    if status == 0:
        await message.answer('–î–æ—Å—Ç–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–∫–∞–∑–∞', reply_markup=generate_type_of_order())


@dp.message_handler(regexp='üöñ –î–æ—Å—Ç–∞–≤–∫–∞')
async def reaction_on_delivery(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é', reply_markup=send_location())


@dp.message_handler(content_types=['location'])
async def save_location(message: Message):
    chat_id = message.chat.id
    location = str(message.location)
    db.create_cart_for_user(chat_id)
    db.insert_location(location='location', telegram_id=chat_id)
    db.insert_enter_address(telegram_id=chat_id, address=location)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_menu_categories())


@dp.message_handler(regexp='üèÉüèª‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑')
async def reaction_on_pickup(message: Message):
    chat_id = message.from_user.id
    db.create_cart_for_user(chat_id)
    order = 'pick_up'
    db.insert_location(order, chat_id)
    await message.answer('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=generate_menu_categories())


@dp.message_handler(regexp='‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
async def reaction_review(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ', reply_markup=generate_review())


@dp.message_handler(regexp='‚òé –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏')
async def reaction_feedback(message: Message):
    await message.answer('<b>–ï–¥–∏–Ω—ã–π call-center:</b> +998951940102 –∏–ª–∏ +998997639787')


@dp.message_handler(regexp='‚¨Ö –ù–∞–∑–∞–¥')
async def reaction_back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu())


@dp.message_handler(regexp='‚¨ÜÔ∏è–ù–∞–∑–∞–¥')
async def reaction_back(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–∫–∞–∑–∞', reply_markup=generate_type_of_order())


@dp.message_handler(regexp='‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def back_to_cart(message: Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    chat_id = message.chat.id
    if db.get_cart_id(chat_id):
        cart_id = db.get_cart_id(chat_id)[0]
    else:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)[0]
    # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—â—É—é —Å—É–º–º—É
    # –≤—ã—Ç–∞—â–∏—Ç—å –∏—Ö –ø–æ—Ç–æ–º –≤—ã—Ç–∞—â–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except:
        total_price, total_quantity = 0, 0
    cart_products = db.get_cart_products_by_cart_id(cart_id)
    text = '''–í –∫–æ—Ä–∑–∏–Ω–µ:\n\n'''
    for cart_product in cart_products:
        text += f'{cart_product[4]} ‚úñÔ∏è {cart_product[2]}\n'
    type_of_order = db.select_location(telegram_id=chat_id)[0]
    if type_of_order == 'pick_up':
        order = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        order_cost = 0
    else:
        order_cost = 15000
        order = '–î–æ—Å—Ç–∞–≤–∫–∞'
    total_price_all = order_cost + total_price
    text += f'–¢–æ–≤–∞—Ä—ã: {total_price} —Å—É–º\n' \
            f'–î–æ—Å—Ç–∞–≤–∫–∞: {order} - {order_cost} —Å—É–º\n' \
            f'–ò—Ç–æ–≥–æ: {total_price_all} —Å—É–º'
    await bot.send_message(chat_id, text, reply_markup=generate_cart_buttons(cart_products, cart_id))


@dp.message_handler(regexp='‚ÜôÔ∏è–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
async def reaction_back(message: Message):
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=generate_menu_categories())


@dp.message_handler(lambda message: message.text in type_of_review)
async def send_review_admin(message: Message):
    id_user = message.from_user.id
    info_about_user = db.get_user_by_id(id_user)
    text = f'–ò–º—è: {info_about_user[1]}\n' \
           f'ID: {info_about_user[0]}\n' \
           f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_user[2]}\n' \
           f'–û—Ç–∑—ã–≤: {message.text}'
    await message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!', reply_markup=main_menu())
    await bot.send_message(chat_id=admin_id[0], text=text)


def categories():
    category = [i[0] for i in db.get_categories()]
    return category


@dp.message_handler(lambda message: message.text in categories())
async def reaction_on_category(message: Message):
    mess = message.text
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup=generate_products(mess))


def product():
    p = [i[0] for i in db.get_all_products()]
    return p


@dp.message_handler(lambda message: message.text in product())
async def get_info_products(message: Message):
    chat_id = message.chat.id
    text = db.get_products_by_title(message.text)
    caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {text[1]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {text[2]}\n\n–¶–µ–Ω–∞: {text[3]} —Å—É–º\n\n'
    try:
        path = 'photo/' + text[4]
        id_photo = text[4]
        try:
            with open(f'{path}', mode='rb') as photo:
                await bot.send_photo(chat_id=chat_id,
                                     photo=photo,
                                     caption=caption,
                                     reply_markup=generate_product_details(text[0]))
        except:
            await bot.send_photo(chat_id=chat_id,
                                 photo=id_photo,
                                 caption=caption,
                                 reply_markup=generate_product_details(text[0]))
    except:
        caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {text[1]}\n\n–¶–µ–Ω–∞: {text[3]} —Å—É–º\n\n'
        await message.answer(text=caption, reply_markup=generate_product_details(text[0]))


@dp.message_handler(regexp='–í–≤–µ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏—é')
async def enter_address(message: Message):
    re = ReplyKeyboardRemove
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=re())
    await AddressState.address.set()


@dp.message_handler(state=AddressState.address)
async def save_enter_address(message: Message, state: FSMContext):
    address = message.text
    chat_id = message.from_user.id
    await state.update_data(address=address)
    info = await state.get_data('address')
    ins_address = info['address']
    await state.finish()
    db.create_cart_for_user(chat_id)
    db.insert_location(telegram_id=chat_id, location='enter')
    db.insert_enter_address(telegram_id=chat_id, address=ins_address)
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=generate_menu_categories())


@dp.message_handler(regexp='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def reaction_on_crt_reply(message: Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    chat_id = message.chat.id
    cart_id = db.get_cart_id(chat_id)[0]
    # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—â—É—é —Å—É–º–º—É
    # –≤—ã—Ç–∞—â–∏—Ç—å –∏—Ö –ø–æ—Ç–æ–º –≤—ã—Ç–∞—â–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except:
        total_price, total_quantity = 0, 0
    cart_products = db.get_cart_products_by_cart_id(cart_id)
    text = '''–í –∫–æ—Ä–∑–∏–Ω–µ:\n\n'''
    for cart_product in cart_products:
        text += f'{cart_product[4]} ‚úñÔ∏è {cart_product[2]}\n'
    type_of_order = db.select_location(telegram_id=chat_id)[0]
    if type_of_order == 'pick_up':
        order = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        order_cost = 0
    else:
        order_cost = 15000
        order = '–î–æ—Å—Ç–∞–≤–∫–∞'
    total_price_all = order_cost + total_price
    text += f'–¢–æ–≤–∞—Ä—ã: {total_price} —Å—É–º\n' \
            f'–î–æ—Å—Ç–∞–≤–∫–∞: {order} - {order_cost} —Å—É–º\n' \
            f'<b>–î–æ—Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ 3 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä 1000 —Å—É–º</b>\n' \
            f'–ò—Ç–æ–≥–æ: {total_price_all} —Å—É–º'
    if total_quantity == 0 or None:
        await bot.send_message(chat_id=chat_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_buttons(cart_products, cart_id))


@dp.message_handler(regexp='üí≥ –ö–∞—Ä—Ç–æ–π')
async def card_payment(message: Message):
    await message.answer(f'–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–º\n'
                         f'8600570473099074\n'
                         f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞',
                         )

    chat_id = message.chat.id
    if db.get_cart_id(chat_id):
        cart_id = db.get_cart_id(chat_id)[0]
    else:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)[0]
    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except:
        total_price, total_quantity = 0, 0
    cart_products = db.get_cart_products_by_cart_id(cart_id)
    phone = db.get_user_by_id(telegram_id=message.from_user.id)[2]
    text = f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ{cart_id}\n' \
           f'–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: {phone}\n'
    type_of_order = db.select_location(telegram_id=chat_id)[0]
    if type_of_order == 'pick_up':
        order = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        order_cost = 0
    else:
        order_cost = 15000
        order = '–î–æ—Å—Ç–∞–≤–∫–∞'
    total_price_all = order_cost + total_price
    for cart_product in cart_products:
        text += f'{cart_product[4]} ‚úñÔ∏è {cart_product[2]}\n'
    text += f'–¢–æ–≤–∞—Ä—ã: {total_price}\n' \
            f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order} - {order_cost}\n' \
            f'–ò—Ç–æ–≥–æ: {total_price_all}\n\n' \
            f'–û–ø–ª–∞—Ç–∞: –ö–∞—Ä—Ç–æ–π\n' \
            f'–°—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'

    await bot.send_message(chat_id=-1001977700512, text=text, reply_markup=accept_or_cancel(chat_id))
    # await bot.send_message(chat_id=cashier[0], text=text, reply_markup=accept_or_cancel(chat_id))
    await CardState.payment.set()


@dp.message_handler(content_types=['photo'], state=CardState.payment)
async def photo_card(message: Message, state=FSMContext):
    chat_id = message.chat.id
    file_name = message.photo[-1].file_id
    await state.update_data(payment=file_name)
    if db.get_cart_id(chat_id):
        cart_id = db.get_cart_id(chat_id)[0]
    else:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)[0]
    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except Exception as err:
        error = err
        total_price, total_quantity = 0, 0
    cart_products = db.get_cart_products_by_cart_id(cart_id)
    phone = db.get_user_by_id(telegram_id=message.from_user.id)[2]
    text = f'''–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ{cart_id}\n
–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: {phone}\n'''
    type_of_order = db.select_location(telegram_id=chat_id)[0]
    if type_of_order == 'pick_up':
        order = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        order_cost = 0
    else:
        order_cost = 15000
        order = '–î–æ—Å—Ç–∞–≤–∫–∞'
    total_price_all = order_cost + total_price
    for cart_product in cart_products:
        text += f'{cart_product[4]} ‚úñÔ∏è {cart_product[2]}\n'
    text += f'–¢–æ–≤–∞—Ä—ã: {total_price}\n' \
            f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order} - {order_cost}\n' \
            f'–ò—Ç–æ–≥–æ: {total_price_all}\n\n' \
            f'–û–ø–ª–∞—Ç–∞: –ö–∞—Ä—Ç–æ–π\n' \
            f'–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ'
    await state.finish()
    await bot.send_message(chat_id=chat_id, text='–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=main_menu())
    await bot.send_photo(chat_id=-1001977700512, photo=file_name, caption=text)


@dp.message_handler(regexp='üí∏ –ù–∞–ª–∏—á–Ω—ã–º–∏')
async def cash_payment(message: Message):
    await message.answer('–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞', reply_markup=main_menu())

    chat_id = message.chat.id
    if db.get_cart_id(chat_id):
        cart_id = db.get_cart_id(chat_id)[0]
    else:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)[0]
    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except Exception as err:
        error = err
        total_price, total_quantity = 0, 0
    cart_products = db.get_cart_products_by_cart_id(cart_id)
    phone = db.get_user_by_id(telegram_id=message.from_user.id)[2]
    text = f'''–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ{cart_id}\n
    –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: {phone}\n'''
    type_of_order = db.select_location(telegram_id=chat_id)[0]
    if type_of_order == 'pick_up':
        order = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        order_cost = 0
    else:
        order_cost = 15000
        order = '–î–æ—Å—Ç–∞–≤–∫–∞'
    total_price_all = order_cost + total_price
    for cart_product in cart_products:
        text += f'{cart_product[4]} ‚úñÔ∏è {cart_product[2]}\n'
    text += f'–¢–æ–≤–∞—Ä—ã: {total_price}\n' \
            f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order} - {order_cost}\n' \
            f'–ò—Ç–æ–≥–æ: {total_price_all}\n\n' \
            f'–û–ø–ª–∞—Ç–∞: –ù–∞–ª–∏—á–Ω—ã–º–∏'

    await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    await bot.send_message(chat_id=-1001977700512, text=text, reply_markup=accept_or_cancel(chat_id))

